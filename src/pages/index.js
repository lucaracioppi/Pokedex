import Head from "next/head";

import { Inter, Island_Moments } from "next/font/google";
import styles from "@/styles/Home.module.css";
import axios from "axios";
const inter = Inter({ subsets: ["latin"] });
import { useEffect, useState } from "react";
import {
  Container,
  Stack,
  Input,
  Checkbox,
  Text,
  Image,
  List,
  ListItem,
  Button,
  SimpleGrid,
  Flex,
  Box,
  Modal,
  ModalOverlay,
  ModalHeader,
  ModalBody,
  ModalContent,
  ModalCloseButton,
  useDisclosure,
} from "@chakra-ui/react";
import Navbar from "@/components/Navbar";
import PokemonCard from "@/components/PokemonCard";
import PokemonData from "@/components/PokemonData";

export default function Home() {
  const pokemonDataModal = useDisclosure();

  const typeColors = {
    normal: "gray",
    fire: "red",
    water: "blue",
    electric: "yellow",
    grass: "green",
    ice: "cyan",
    fighting: "orange",
    poison: "purple",
    ground: "green",
    flying: "teal",
    psychic: "pink",
    bug: "yellow",
    rock: "gray",
    ghost: "pink",
    dragon: "teal",
    dark: "blue",
    steel: "gray",
    fairy: "teal",
  };

  const [isLoading, setIsLoading] = useState(false);
  const [pokemon, setPokemon] = useState([]);
  const [selectedPokemon, setSelectedPokemon] = useState();
  const [totalPokemon, setTotalPokemon] = useState(0);
  const [offset, setOffset] = useState(0);
  const [isLoadMore, setIsLoadMore] = useState(true);
  const [checkAll, setCheckAll] = useState(true);
  const [checkCatched, setCheckCatched] = useState(false);

  useEffect(() => {
    fetchPokemon(offset);
  }, [offset]);

  // Función para obtener los Pokémon desde la API
  const fetchPokemon = async (offset) => {
    setIsLoading(true);
    try {
      const response = await axios.get(
        `https://pokeapi.co/api/v2/pokemon/?limit=20&offset=${offset}`
      );
      const promises = response.data.results.map((result) => axios(result.url));
      const fetchedPokemon = (await Promise.all(promises)).map(
        (res) => res.data
      );
      setPokemon(fetchedPokemon);
      setTotalPokemon(response.data.count);
    } catch (error) {
      console.error("Error fetching Pokémon:", error);
    }
    setIsLoading(false);
  };

  function getCatched(filter) {
    setIsLoading(true);

    if (checkCatched || filter === "catched") {
      const fetchCatched = async () => {
        try {
          const response = await axios.get(`/api/catched`);
          setPokemon(response.data);
        } catch (error) {
          console.error("Error:", error);
        }
      };
      fetchCatched();
    } else {
      fetchPokemon(offset);
    }
    setIsLoading(false);
  }

  // Paginación
  function handleNextPage() {
    if (totalPokemon - offset > 20 && checkAll) {
      setOffset(offset + 20);
      setIsLoadMore(true);
    }
  }

  function handlePreviousPage() {
    if (offset >= 20 && checkAll) {
      setOffset(offset - 20);
      setIsLoadMore(false);
    }
  }

  function handleViewPokemon(pokemon) {
    setSelectedPokemon(pokemon);
    pokemonDataModal.onOpen();
  }

  function handleFilterChange(filter) {
    if (filter === "catched") {
      setCheckCatched(true);
      setCheckAll(false);
      getCatched(filter);
    } else {
      setCheckAll(true);
      setCheckCatched(false);
      fetchPokemon(offset);
    }
  }

  return (
    <>
      <Head>
        <title>Pokemon Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Stack
        pt={"10"}
        py="5"
        width={"100%"}
        shadow={"sm"}
        justifyContent="center"
        alignItems="center"
        position="fixed"
        top="16"
        zIndex={10}
        left="50%"
        transform="translate(-50%, -50%)"
        bgColor="white"
      >
        <Image src="/images/pokemon.png" alt="Pokemon" width={300} />
      </Stack>
      <Flex minH="100vh" justifyContent="center" mt={"36"}>
        <Container maxW="container.xl">
          <Stack direction="row" pt="7" justifyContent="center" spacing="8">
            <Checkbox
              isChecked={checkAll}
              onChange={() => handleFilterChange("all")}
            >
              All Pokemons
            </Checkbox>
            <Checkbox
              isChecked={checkCatched}
              onChange={() => handleFilterChange("catched")}
            >
              Catched Pokemons
            </Checkbox>
          </Stack>
          <Stack p="5" mt={"8"} alignItems="center" spacing="5">
            <SimpleGrid spacing="5" columns={{ base: 1, sm: 2, md: 4, lg: 5 }}>
              {pokemon.map((pokemon) => (
                <Box
                  justifyContent={"center"}
                  as="button"
                  key={pokemon.id}
                  onClick={() => handleViewPokemon(pokemon)}
                >
                  <PokemonCard typeColors={typeColors} pokemon={pokemon} />
                </Box>
              ))}
            </SimpleGrid>
            <Stack
              display={checkAll ? "flex" : "none"}
              direction="row"
              spacing="5"
              mt={"6"}
            >
              <Button
                display={offset < 20 ? "none" : "flex"}
                isLoading={isLoading && !isLoadMore}
                onClick={handlePreviousPage}
                loadingText="Cargando..."
                colorScheme="teal"
                variant="outline"
                width={130}
              >
                Ver anteriores
              </Button>
              <Button
                display={totalPokemon - offset > 20 ? "flex" : "none"}
                isLoading={isLoading && isLoadMore}
                onClick={handleNextPage}
                loadingText="Cargando..."
                colorScheme="teal"
                variant="outline"
                width={130}
              >
                Cargas más
              </Button>
            </Stack>
            <Stack
              display={checkCatched && pokemon.length === 0 ? "flex" : "none"}
              width={{ base: 300, md: 500 }}
              height={{ base: 150, md: 200 }}
              bgColor={"gray.100"}
              color={"blue.300"}
              justifyContent="center"
              alignItems="center"
              borderRadius={"xl"}
              shadow={"sm"}
            >
              <Text
                fontWeight={"bold"}
                fontSize={{ base: "xl", md: "3xl" }}
                as="b"
                px={{ base: "3", md: "5" }}
                textAlign={"center"}
              >
                No hay pokemones capturados ¡Sal a capturarlos!
              </Text>
            </Stack>
          </Stack>
        </Container>
      </Flex>
      <Modal {...pokemonDataModal} onCloseComplete={getCatched}>
        <ModalOverlay />
        <ModalContent>
          <ModalCloseButton />
          <ModalBody>
            {selectedPokemon && (
              <PokemonData typeColors={typeColors} pokemon={selectedPokemon} />
            )}
          </ModalBody>
        </ModalContent>
      </Modal>
    </>
  );
}
